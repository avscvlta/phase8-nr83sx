//Adventure Game
//Phase8 - Bosses

document.body.style.zoom = "300%";
document.addEventListener("keydown",keyDownHandler, false);
document.addEventListener("keyup",keyUpHandler, false);

let canvas = document.getElementById("gameCanvas");
let ctx = canvas.getContext("2d");
let fps = 60;
let mapTiles = new Image();
mapTiles.src = "overworld.png";
let hero = new Image();
hero.src = "hero.png";
let rightPressed = false;
let leftPressed = false;
let upPressed = false;
let downPressed = false;
let lastButtonPressed = "up";
let animationCounter = 0;
let currentAnimation = 0;
let animationheroSpeed = 0;
let heroX = 116;
let heroY = 130;
let heroSpeed = 2;
//map
let leftTileEdge = 0;
let rightTileEdge = 0;
let topTileEdge = 0;
let bottomTileEdge = 0;
let leftCollapse = 6;
let rightCollapse = 7;
let topCollapse = 13;
let bottomCollapse = 3;
let mapColumns = ["A","B","C","D","E","F","G","H","I","J","K","L"];
let currentColumn = 6;
let currentRow = 8;
let currentMap = mapG8;
let currentMapName = "map" + mapColumns[currentColumn] + currentRow;
// HUD
let hudBackground = new Image();
hudBackground.src = "hud.png";
let healthSprite = new Image();
healthSprite.src = "health.png";
let maxHealth = 4;
let currentHealth = 4;
let attackSprite = new Image();
attackSprite.src = "attack.png";
let defenseSprite = new Image();
defenseSprite.src = "defense.png";
let prizeSprite = new Image();
prizeSprite.src = "prize.png";
let currentPrize = 0;
// Asset Caves
let healthCaveEntranceX = 0;
let healthCaveEntranceY = 0;
let itemCaveEntranceX = 0;
let itemCaveEntranceY = 0;
let previousMap = mapG8;
let heroExitX = 0;
let heroExitY = 0;
let heroInHealthCave = false;
let heroInItemCave = false;
let healthInCave = false;
let healthX = 120;
let healthY = 120;
let itemX = 120;
let itemY = 120;
let healthMap;
let healthLocations = [
	["mapG7",true],//reg1a
	["mapI4",true],//reg1b
	["mapJ7",true],//reg1c
	["mapE7",true],//reg2a
	["mapD6",true],//reg2b
	["mapC7",true],//reg2c
	["mapC2",true],//reg3a
	["mapB5",true],//reg3b
	["mapE5",true],//reg3c
	["map",true],//reg4a
	["map",true],//reg4b
	["map",true] //reg4c
	]
let itemLocations = [
	["mapG8",false],//att reg1
	["mapL8",false],//def reg1
	["mapA8",false],//att reg2
	["mapC5",false],//def reg2
	["mapA1",false],//att reg3
	["mapD1",false],//def reg3
	["map",false],//att reg4
	["map",false] //def reg4
]
let attackDamage = [1, 2, 4, 10];
let defenseProtection = [.5, .34, .25, .125];
// Enemies
let wallMap;
let enemyFrameReset = 16 //number of game frames to move 16 pixels
let pathNodes;
let enemyIncrement = .25;
let enemySpriteDirection = "right";
let enemySpriteColumn = 0;
let enemySpriteRow;
let map2d = [];
let map2dRow = [];
let routefindingInput;
let enemySprite = new Image();
enemySprite.src = "enemies.png";
mapHitCreator();
let currentMapEnemies = eval("enemyProfile" + enemyProfileAssignments[currentMapName]);
let mapEnemies = [];
createEnemies(); // draw enemies on first map
// Combat
let mapHeadStart = true;
let spacePressed = false;
let attackSpriteX = new Image();
attackSpriteX.src = "attackX.png";
let attackSpriteY = new Image();
attackSpriteY.src = "attackY.png";
let attackFrame = 0;
let attacking = false;
let canAttack = true;
let heroInvincibility = false;
let invincibilityCounter = 0;
let attackLength = 12;
let canWhackEnemy = true;
let heroBlink = false;
let currentAttackLevel = 0;
let currentDefenseLevel = 1;
//Dungeons
let dungeonEntranceX = 0;
let dungeonEntranceY = 0;
let heroInDungeon1 = false;
let heroInDungeon2 = false;
let heroInDungeon3 = false;
let heroInDungeon4 = false;

function overworldBuilder()
{
	if(heroX < - 8 && lastButtonPressed == "left")
	{
		heroX = 248;
		currentColumn = currentColumn - 1;
		buildNewMap();
	}
	if(heroX > 248 && lastButtonPressed == "right")
	{
		heroX = -8;
		currentColumn = currentColumn + 1;
		buildNewMap();
	}
	if(heroY < 58 && lastButtonPressed == "up")
	{
		heroY = 226;
		currentRow = currentRow - 1;
		buildNewMap();
	}
	if(heroY > 226 && lastButtonPressed == "down" && heroInDungeon1 == false)
	{
		heroY = 60;
		currentRow = currentRow + 1;
		buildNewMap();
	}
}

function buildNewMap()
{
	currentMap = eval("map" + mapColumns[currentColumn] + currentRow);
	currentMapName = "map" + mapColumns[currentColumn] + currentRow;
	mapHitCreator();
	healthCaveEntranceX = 0;
	healthCaveEntranceY = 0;
	itemCaveEntranceX = 0;
	itemCaveEntranceY = 0;
	dungeonEntranceX = 0;
	dungeonEntranceY = 0;
	invincibilityCounter = 0;
	heroInvincibility = false;
	currentMapEnemies = eval("enemyProfile" + enemyProfileAssignments[currentMapName]);
	createEnemies();
}

function keyDownHandler(event)
{
	if(event.keyCode == 37)
	{
		leftPressed = true;
		rightPressed = false;
		upPressed = false;
		downPressed = false;
		lastButtonPressed = "left";
	}
	else if(event.keyCode == 39)
	{
		leftPressed = false;
		rightPressed = true;
		upPressed = false;
		downPressed = false;
		lastButtonPressed = "right";
	}
	else if(event.keyCode == 38)
	{
		leftPressed = false;
		rightPressed = false;
		upPressed = true;
		downPressed = false;
		lastButtonPressed = "up";
	}
	else if(event.keyCode == 40)
	{
		leftPressed = false;
		rightPressed = false;
		upPressed = false;
		downPressed = true;
		lastButtonPressed = "down";
	}
	if(event.keyCode == 32)
	{
		spacePressed = true;
	}
}

function keyUpHandler(event)
{
	if(event.keyCode == 37)
	{
		leftPressed = false;
	}
	if(event.keyCode == 39)
	{
		rightPressed = false;
	}
	if(event.keyCode == 38)
	{
		upPressed = false;
	}
	if(event.keyCode == 40)
	{
		downPressed = false;
	}
	if(event.keyCode == 32)
	{
		spacePressed = false;
		canAttack = true;
	}
}

function drawHero()
{
	animationCounter++;
	if(leftPressed && !collision(heroX - heroSpeed, heroY, currentMap))
	{
		heroX -= heroSpeed;
		if(heroBlink == false)
		{
			if(currentAnimation == 0)
			{
				ctx.drawImage(hero, 16, 0, 16, 16, heroX, heroY, 16, 16)
			}
			else if(currentAnimation == 1)
			{
				ctx.drawImage(hero, 16, 16, 16, 16, heroX, heroY, 16, 16)
			}
		}
		if(animationCounter >= 6)
		{
			currentAnimation++;
			animationCounter = 0;
			if(currentAnimation > 1)
			{
				currentAnimation = 0;
			}
		}
	}
	else if(rightPressed && !collision(heroX + heroSpeed, heroY, currentMap))
	{
		heroX += heroSpeed;
		if(heroBlink == false)
		{
			if(currentAnimation == 0)
			{
				ctx.drawImage(hero, 48, 0, 16, 16, heroX, heroY, 16, 16)
			}
			else if(currentAnimation == 1)
			{
				ctx.drawImage(hero, 48, 16, 16, 16, heroX, heroY, 16, 16)
			}
		}
		if(animationCounter >= 6)
		{
			currentAnimation++;
			animationCounter = 0;
			if(currentAnimation > 1)
			{
				currentAnimation = 0;
			}
		}
	}
	else if(upPressed && !collision(heroX, heroY - heroSpeed, currentMap))
	{
		heroY -= heroSpeed;
		if(heroBlink == false)
		{
			if(currentAnimation == 0)
			{
				ctx.drawImage(hero, 32, 0, 16, 16, heroX, heroY, 16, 16)
			}
			else if(currentAnimation == 1)
			{
				ctx.drawImage(hero, 32, 16, 16, 16, heroX, heroY, 16, 16)
			}
		}
		if(animationCounter >= 6)
		{
			currentAnimation++;
			animationCounter = 0;
			if(currentAnimation > 1)
			{
				currentAnimation = 0;
			}
		}
	}
	else if(downPressed && !collision(heroX, heroY + heroSpeed, currentMap))
	{
		heroY += heroSpeed;
		if(heroBlink == false)
		{
			if(currentAnimation == 0)
			{
				ctx.drawImage(hero, 0, 0, 16, 16, heroX, heroY, 16, 16)
			}
			else if(currentAnimation == 1)
			{
				ctx.drawImage(hero, 0, 16, 16, 16, heroX, heroY, 16, 16)
			}
		}
		if(animationCounter >= 6)
		{
			currentAnimation++;
			animationCounter = 0;
			if(currentAnimation > 1)
			{
				currentAnimation = 0;
			}
		}
	}
	else	
	{
		if(attackFrame <= 0 || attackFrame >= 11)
		{
			if(heroBlink == false)
			{
				if(lastButtonPressed == "down")
				{
					ctx.drawImage(hero, 0, 32, 16, 16, heroX, heroY, 16, 16)
				}
				else if(lastButtonPressed == "up")
				{
					ctx.drawImage(hero, 32, 32, 16, 16, heroX, heroY, 16, 16)
				}
				else if(lastButtonPressed == "right")
				{
					ctx.drawImage(hero, 48, 32, 16, 16, heroX, heroY, 16, 16)
				}
				else if(lastButtonPressed == "left")
				{
					ctx.drawImage(hero, 16, 32, 16, 16, heroX, heroY, 16, 16)
				}
			}
		}
	}
	if(spacePressed && !attacking && canAttack && currentAttackLevel > 0)
	{
		attackFrame = 1;
		attacking = true;
		canAttack = false;
	}
	if(attackFrame > 0)
	{
		attackFrame = attackFrame + 1;
	}
	if(attackFrame > 0 && attackFrame < 13)
	{
		if(lastButtonPressed == "right") 
		{
			ctx.drawImage(attackSpriteX, Math.floor(attackFrame/3) * 28, (attackRow * 32), 28, 16, heroX, heroY, 28, 16);
		}
		if(lastButtonPressed == "left")
		{
			ctx.drawImage(attackSpriteX, Math.floor(attackFrame/3) * 28, (attackRow * 32) + 16, 28, 16, heroX - 12, heroY, 28, 16);
		}
		if(lastButtonPressed == "up")
		{
			ctx.drawImage(attackSpriteY, Math.floor(attackFrame/3) * 16, (attackRow * 56) + 28, 16, 28, heroX, heroY - 12, 16, 28);
		}
		if(lastButtonPressed == "down")
		{
			ctx.drawImage(attackSpriteY, Math.floor(attackFrame/3) * 16, (attackRow * 56), 16, 28, heroX, heroY, 16, 28);
		}
	}
	if(attackFrame > 18)
	{
		attackFrame = 0;
		attacking = false;
		canWhackEnemy = true;
	}
}

function tileEdgeFinder(mapArrayIndex)
{
	leftTileEdge = (mapArrayIndex%16) * 16;
	rightTileEdge = leftTileEdge + 16;
	topTileEdge = Math.floor(mapArrayIndex/16) * 16 + 64;
	bottomTileEdge = topTileEdge + 16;	
}

function drawMap(level)
{
	for(let i=0; i < level.length; i++)
	{
		tileEdgeFinder(i);
		ctx.drawImage(mapTiles,
		(((level[i]-1)%10) *16), //x location on overworld.png
		(Math.floor((level[i]-1)/10)) *16, //y location on overworld.png
		16, 16, leftTileEdge, topTileEdge, 16, 16);
	}
}

function collision(x, y, map)
{
	for(let i=0; i < map.length; i++)
	{
		tileEdgeFinder(i);
		if(
		map[i] != 4 &&
		map[i] != 8 &&
		map[i] != 10 &&
		map[i] != 34 &&
		map[i] != 40 &&
		map[i] != 64 &&
		map[i] != 65 &&
		map[i] != 70 &&
		map[i] != 74 &&
		map[i] != 132 &&
		map[i] != 133 &&
		map[i] != 137 &&
		map[i] != 138 &&
		map[i] != 162 &&
		map[i] != 167 &&
		map[i] != 168 &&
		map[i] != 102
		) //don't check collision on these tiles
		{
			if(
				x + leftCollapse <= rightTileEdge &&
				x + 16 - rightCollapse >= leftTileEdge &&
				y + topCollapse <= bottomTileEdge &&
				y + 16 - bottomCollapse >= topTileEdge
			)
			{
				return true; //collison is occuring
			}
		}			
	}
}

function drawHUD()
{
	ctx.drawImage(hudBackground, 0, 0, 256, 64, 0, 0, 256, 64); //draw HUD background
	for(let i = 0; i <= 15; i++) //draw 16 uncollected health
	{
		ctx.drawImage(healthSprite, 32, 0, 16, 16, i*16, 48, 16, 16);
	}
	for(let i = 0; i <= maxHealth - 1; i++) //draw collected health
	{
		ctx.drawImage(healthSprite, 16, 0, 16, 16, i*16, 48, 16, 16);
	}
	for(let i = 0; i <= currentHealth - 1; i++) //draw current health except the last heart
	{
		ctx.drawImage(healthSprite, 0, 0, 16, 16, i*16, 48, 16, 16);
	}
	ctx.drawImage(healthSprite, 0, 0, (currentHealth%1)*16, 16, (Math.floor(currentHealth))*16, 48, (currentHealth%1)*16, 16); //draw percent of last heart
	for(let i = 0; i < 7; i = i+2) //draw attacks
	{
		if(itemLocations[i][1] == true)
		{
		ctx.drawImage(attackSprite, i*16, 0, 32, 32, 16, 16, 32, 32); // current attack
		ctx.drawImage(attackSprite, 16 * ((i/2)%2) + 128, Math.floor(i/4) * 16, 16, 16, 48 * ((i/2)%2), (Math.floor(i/4) + 1) * 16, 16, 16); // collected attacks
		}
	}
	for(let i = 1; i < 8; i = i+2) //draw defense
	{
		if(itemLocations[i][1] == true)
		{
		ctx.drawImage(defenseSprite, (i-1)*16, 0, 32, 32, 208, 16, 32, 32); // current defense
		ctx.drawImage(defenseSprite, 16 * (((i-1)/2)%2) + 128, Math.floor((i-1)/4) * 16, 16, 16, 48 * (((i-1)/2)%2) + 192, (Math.floor((i-1)/4) + 1) * 16, 16, 16); // collected defense
		}
	}
	for(let i = 0; i < currentPrize; i++) //draw prizes
	{
		ctx.drawImage(prizeSprite, i*32, 0, 32, 48, (i*32) + 64, 0, 32, 48); // current defense
	}
	
}

function healthCaves()
{
	for(let i = 0; i <= currentMap.length; i++)
	{
		if(
		currentMap[i] == 9  ||
		currentMap[i] == 44 ||
		currentMap[i] == 73
		) // find coordinates of health door panels
		{
			tileEdgeFinder(i);
			healthCaveEntranceX = leftTileEdge;
			healthCaveEntranceY = topTileEdge;
		}
	}
	if(
			heroX <= healthCaveEntranceX + 6 &&
			heroX + 6 >= healthCaveEntranceX &&
			heroY <= healthCaveEntranceY + 6 &&
			heroY + 2 >= healthCaveEntranceY &&
			lastButtonPressed == "up"
		)
	{
		heroInHealthCave = true;
		previousMap = currentMap;
		heroExitX = heroX;
		heroExitY = heroY;
		heroX = 120;
		heroY = 220;
		currentMapEnemies = [
			{enemyType01: 0},
			{enemyType02: 0},
			{enemyType03: 0},
			{enemyType04: 0},
			{enemyType05: 0},
			{enemyType06: 0},
			{enemyType07: 0},
			{enemyType08: 0},
			{enemyType09: 0},
			{enemyType10: 0}
		];
		createEnemies();
	}
	if(heroInHealthCave)
	{
		currentMap = mapHealth;
		for(let i = 0; i < healthLocations.length; i++)
		{
			if(healthLocations[i][0] == "map" + mapColumns[currentColumn] + currentRow && healthLocations[i][1] == true)
			{
				ctx.drawImage(healthSprite, 0, 0, 16, 16, healthX, healthY, 16, 16);
				healthMap = i;
			}
		}
		if(healthLocations[healthMap][1] == true)
		{
			if(
				heroX <= healthX + 8 &&
				heroX + 16 >= healthX &&
				heroY <= healthY + 8 &&
				heroY + 16 >= healthY
			)
			{
				maxHealth = maxHealth + 1;
				currentHealth = maxHealth;
				healthLocations[healthMap][1] = false;
			}
		}
		if(heroY > 226)
		{
			heroX = heroExitX;
			heroY = heroExitY;
			currentMap = previousMap;
			heroInHealthCave = false;
			healthInHealthCave = false;
			currentMapEnemies = eval("enemyProfile" + enemyProfileAssignments[currentMapName]);
			createEnemies();
		}
	}
}

function itemCaves()
{
	for(let i = 0; i <= currentMap.length; i++)
	{
		if(
		currentMap[i] == 14 ||
		currentMap[i] == 39 ||
		currentMap[i] == 63
		) // find coordinates of health door panels
		{
			tileEdgeFinder(i);
			itemCaveEntranceX = leftTileEdge;
			itemCaveEntranceY = topTileEdge;
		}
	}
	if(
			heroX <= itemCaveEntranceX + 6 &&
			heroX + 6 >= itemCaveEntranceX &&
			heroY <= itemCaveEntranceY + 6 &&
			heroY + 2 >= itemCaveEntranceY &&
			lastButtonPressed == "up"
		)
	{
		heroInItemCave = true;
		previousMap = currentMap;
		heroExitX = heroX;
		heroExitY = heroY;
		heroX = 120;
		heroY = 220;
		itemCaveEntranceX = 0;
		itemCaveEntranceY = 0;
		currentMapEnemies = [
			{enemyType01: 0},
			{enemyType02: 0},
			{enemyType03: 0},
			{enemyType04: 0},
			{enemyType05: 0},
			{enemyType06: 0},
			{enemyType07: 0},
			{enemyType08: 0},
			{enemyType09: 0},
			{enemyType10: 0}
		];
		createEnemies();
	}
	if(heroInItemCave)
	{
		currentMap = mapItem;  //change this
		for(let i = 0; i < itemLocations.length; i++)
		{
			if(itemLocations[i][0] == "map" + mapColumns[currentColumn] + currentRow && itemLocations[i][1] == false)
			{
				itemNumber = i;
				if(i%2 == 0)
				{
					ctx.drawImage(attackSprite, 16 * ((i/2)%2) + 128, Math.floor(i/4) * 16, 16, 16, itemX, itemY, 16, 16);
					itemNumber = i;
				}
				else
				{
					ctx.drawImage(defenseSprite, 16 * (((i-1)/2)%2) + 128, Math.floor((i-1)/4) * 16, 16, 16, itemX, itemY, 16, 16);
				}
			}
		}
		if(itemLocations[itemNumber][1] == false)
		{
			if(
				heroX <= itemX + 8 &&
				heroX + 16 >= itemX &&
				heroY <= itemY + 8 &&
				heroY + 16 >= itemY
			)
			{
				itemLocations[itemNumber][1] = true;
				attackLevelChanger();
				defenseLevelChanger();
			}
		}
		if(heroY > 226)
		{
			heroX = heroExitX;
			heroY = heroExitY;
			currentMap = previousMap;
			heroInItemCave = false;
			currentMapEnemies = eval("enemyProfile" + enemyProfileAssignments[currentMapName]);
			createEnemies();
		}
	}
}

//enemy maker
function enemy(name, speed, positionX, positionY, health, attack, spriteRow)
{
	this.name = name;
	this.speed = speed;
	this.paused = false;
	this.pauseCounter = 0;
	this.positionX = positionX;
	this.positionY = positionY;
	this.previousNodeX = positionX;
	this.previousNodeY = positionY;
	this.nextNodeX = positionX;
	this.nextNodeY = positionY;
	this.health = health;
	this.attack = attack;
	this.getNewPath = true;
	this.enemyFrame = 0;
	this.spriteRow = spriteRow;
}

function createEnemies()
{
	mapEnemies = [];
	for(let i = 1; i <= currentMapEnemies[0].enemyType01; i++)
	{
		mapEnemies.push(new enemy("enemyType01", 2, 0, 0, 1, 1, 0));
	}
	for(let i = 1; i <= currentMapEnemies[1].enemyType02; i++)
	{
		mapEnemies.push(new enemy("enemyType02", 3, 0, 0, 8, 2, 32));
	}
	for(let i = 1; i <= currentMapEnemies[2].enemyType03; i++)
	{
		mapEnemies.push(new enemy("enemyType03", 2, 0, 0, 5, 3, 64));
	}
	for(let i = 1; i <= currentMapEnemies[3].enemyType04; i++)
	{
		mapEnemies.push(new enemy("enemyType04", 3, 0, 0, 8, 4, 0));
	}
	for(let i = 1; i <= currentMapEnemies[4].enemyType05; i++)
	{
		mapEnemies.push(new enemy("enemyType05", 2, 0, 0, 5, 5, 0));
	}
	for(let i = 1; i <= currentMapEnemies[5].enemyType06; i++)
	{
		mapEnemies.push(new enemy("enemyType06", 3, 0, 0, 8, 6, 0));
	}
	for(let i = 1; i <= currentMapEnemies[6].enemyType07; i++)
	{
		mapEnemies.push(new enemy("enemyType07", 2, 0, 0, 5, 7, 0));
	}
	for(let i = 1; i <= currentMapEnemies[7].enemyType08; i++)
	{
		mapEnemies.push(new enemy("enemyType08", 3, 0, 0, 8, 8, 0));
	}
	for(let i = 1; i <= currentMapEnemies[8].enemyType09; i++)
	{
		mapEnemies.push(new enemy("enemyType09", 3, 0, 0, 8, 9, 0));
	}
	for(let i = 1; i <= currentMapEnemies[9].enemyType10; i++)
	{
		mapEnemies.push(new enemy("enemyType10", 3, 0, 0, 8, 10, 0));
	}
}


function mapHitCreator()
{
	map2d = [];
	wallMap = [...currentMap];
	for(let i = 0; i <= wallMap.length; i++)
	{
		if(
			wallMap[i] == 4 ||
			wallMap[i] == 8 ||
			wallMap[i] == 10 ||
			wallMap[i] == 34 ||
			wallMap[i] == 40 ||
			wallMap[i] == 64 ||
			wallMap[i] == 65 ||
			wallMap[i] == 70 ||
			wallMap[i] == 74 ||
			wallMap[i] == 132 ||
			wallMap[i] == 133
		) //convert walkable to '1'
		{
			wallMap[i] = 1;
		}
		else if(wallMap[i] > 0)  //convert nonwalkable to '0'
		{
			wallMap[i] = 0;
		}
	}
	
	map2d = [];
	for(let i = 0; i < 11; i++)
	{
		for(let j = 0; j < 16; j++)
		{
			map2dRow.push(wallMap[i*16+j]);
		}
		map2d.push(map2dRow);
		map2dRow = [];
	}
	
	routefindingInput = new Graph([
		eval(map2d[0]),
		eval(map2d[1]),
		eval(map2d[2]),
		eval(map2d[3]),
		eval(map2d[4]),
		eval(map2d[5]),
		eval(map2d[6]),
		eval(map2d[7]),
		eval(map2d[8]),
		eval(map2d[9]),
		eval(map2d[10])
		]);
}

function drawEnemies()
{
	if(heroInItemCave != true && heroInHealthCave != true )
	{
		for(i = 0; i < mapEnemies.length; i++)
		{
			if([mapEnemies[i].positionY] == 0 && [mapEnemies[i].positionX] == 0)
			{
				while(map2d[mapEnemies[i].positionY][mapEnemies[i].positionX] == 0 ||
					mapEnemies[i].positionX <= 3 ||
					mapEnemies[i].positionX >= 13 ||
					mapEnemies[i].positionY <= 3 ||
					mapEnemies[i].positionY >= 7
				)
				{
					mapEnemies[i].positionX = Math.floor(Math.random()*16);
					mapEnemies[i].positionY = Math.floor(Math.random()*11);
					mapEnemies[i].startPathX = mapEnemies[i].positionX;
					mapEnemies[i].startPathY = mapEnemies[i].positionY;
				}
			}
			//makes new path and stores as pathNodes, and mapEnemies[i].path////////////////////////
			if(mapEnemies[i].getNewPath)
			{
				// https://github.com/bgrins/javascript-astar/tree/master
				while(result == null || result.length == 0) // keep repeating if the end is not a walkable space
				{
					mapEnemies[i].endPathX = Math.floor(Math.random()*16);
					mapEnemies[i].endPathY = Math.floor(Math.random()*11);
					var start = routefindingInput.grid[mapEnemies[i].startPathY][mapEnemies[i].startPathX]; //row then col
					var end = routefindingInput.grid[mapEnemies[i].endPathY][mapEnemies[i].endPathX];
					var result = astar.search(routefindingInput, start, end);
					pathNodes = [...result];
				}
				result = null; // clear result for next enemy
				mapEnemies[i].startPathX = mapEnemies[i].endPathX;
				mapEnemies[i].startPathY = mapEnemies[i].endPathY;
				mapEnemies[i].path = [...pathNodes];
				if(mapEnemies[i].nextNodeX == 0)
				{
					mapEnemies[i].nextNodeX = mapEnemies[i].path[0].y * 16; // x16 convert tiles into pixels
					mapEnemies[i].nextNodeY = mapEnemies[i].path[0].x * 16 + 64; //x16 convert tiles into pixels; + 64 push down for HUD
				}
				//pathNodes = null;
				mapEnemies[i].getNewPath = false;
			}
			//moves from node to node in path, in 4 increments
			if(mapEnemies[i].paused == false)
			{
				if(mapEnemies[i].enemyFrame == 0) // start movement to next node in path
				{
					mapEnemies[i].previousNodeX = mapEnemies[i].nextNodeX;
					mapEnemies[i].previousNodeY = mapEnemies[i].nextNodeY;
					mapEnemies[i].nextNodeX = mapEnemies[i].path[0].y * 16; // x16 convert tiles into pixels
					mapEnemies[i].nextNodeY = mapEnemies[i].path[0].x * 16 + 64; //x16 convert tiles into pixels; + 64 push down for HUD
					mapEnemies[i].path.shift();
				}
				if(mapEnemies[i].enemyFrame >= 0)
				{
					enemyIncrement = .25;
					enemySpriteRow = mapEnemies[i].spriteRow; //animation frame 1
				}
				if(mapEnemies[i].enemyFrame >= enemyFrameReset * .25) // 1/4 to next node
				{
					enemyIncrement = .50;
					enemySpriteRow = mapEnemies[i].spriteRow + 16; //animation frame 2
				}
				if(mapEnemies[i].enemyFrame >= enemyFrameReset * .5) // 1/2 to next node
				{
					enemyIncrement = .75;
					enemySpriteRow = mapEnemies[i].spriteRow; //animation frame 1
				}
				if(mapEnemies[i].enemyFrame >= enemyFrameReset * .75) // 3/4 to next node
				{
					enemyIncrement = 1;
					enemySpriteRow = mapEnemies[i].spriteRow + 16; //animation frame 2
				}
				mapEnemies[i].enemyFrame = mapEnemies[i].enemyFrame + 1;
				if(mapEnemies[i].enemyFrame >= enemyFrameReset)
				{
					mapEnemies[i].enemyFrame = 0;
				}
				// mapEnemies[i].previousNodeX is node moving away from
				// mapEnemies[i].nextNodeX is node moving toward
				// mapEnemies[i].positionX is current position (on or between nodes)
				mapEnemies[i].positionX = mapEnemies[i].previousNodeX + (enemyIncrement * (mapEnemies[i].nextNodeX - mapEnemies[i].previousNodeX));
				mapEnemies[i].positionY = mapEnemies[i].previousNodeY + (enemyIncrement * (mapEnemies[i].nextNodeY - mapEnemies[i].previousNodeY));
				////// changes sprites /////////////
				if(mapEnemies[i].previousNodeX > mapEnemies[i].nextNodeX)
				{
					enemySpriteDirection = "left";
					enemySpriteColumn = 16;
				}
				if(mapEnemies[i].nextNodeX > mapEnemies[i].previousNodeX)
				{
					enemySpriteDirection = "right";
					enemySpriteColumn = 48;
				}
				if(mapEnemies[i].previousNodeY > mapEnemies[i].nextNodeY)
				{
					enemySpriteDirection = "up";
					enemySpriteColumn = 32;
				}
				if(mapEnemies[i].nextNodeY > mapEnemies[i].previousNodeY)
				{
					enemySpriteDirection = "down";
					enemySpriteColumn = 0;
				}
			}
			ctx.drawImage(enemySprite, enemySpriteColumn, enemySpriteRow, 16, 16, mapEnemies[i].positionX, mapEnemies[i].positionY, 16, 16);
			//// if the path is done, get a new path
			if(mapEnemies[i].path.length <= 0)
			{
				mapEnemies[i].getNewPath = true;
			}
			if(mapEnemies[i].paused == true && mapEnemies[i].pauseCounter == 0)
			{
				mapEnemies[i].pauseCounter = 1;
			}
			if(mapEnemies[i].pauseCounter > 0)
			{
				mapEnemies[i].pauseCounter = mapEnemies[i].pauseCounter + 1;
			}
			if(mapEnemies[i].pauseCounter > 50)
			{
				mapEnemies[i].paused = false;
				mapEnemies[i].pauseCounter = 0;
			}
		}
	}
}

function enemyHitDetection()
{
	for(let i = 0; i < mapEnemies.length; i++)
	{
		if(
			heroX + 16 > mapEnemies[i].positionX &&
			heroX < mapEnemies[i].positionX + 16 &&
			heroY + 16 > mapEnemies[i].positionY &&
			heroY < mapEnemies[i].positionY + 16 &&
			!heroInvincibility
		)
		{
			if(currentHealth > 0)
			{
				currentHealth = currentHealth - (mapEnemies[i].attack * currentDefenseLevel);
			}
			heroInvincibility = true;
			invincibilityCounter = 1;
		}
		if(invincibilityCounter == 1)
		{
			heroBlink = true;
		}
	}
	if(invincibilityCounter > 0)
	{
		heroBlink = false;
		invincibilityCounter = invincibilityCounter + 1;
		let loggedHeroX = heroX;
		if(invincibilityCounter%10 <= 4)
		{
			heroBlink = true;				
		}
	}
	if(invincibilityCounter > 120)
	{
		invincibilityCounter = 0;
		heroInvincibility = false;
		heroBlink = false;
	}
}

function attackDetection()
{
	for(let i = 0; i < mapEnemies.length; i++)
	{
		if(attacking)
		{
			if(lastButtonPressed == "left")
			{
				if(mapEnemies[i].positionX + 16 >= heroX - attackLength &&
					mapEnemies[i].positionX + 16 <= heroX + 8 &&
					mapEnemies[i].positionY + 16 >= heroY &&
					mapEnemies[i].positionY <= heroY + 16
				)
				{
					enemyHit(i);
				}
			}
			if(lastButtonPressed == "right")
			{
				if(mapEnemies[i].positionX <= heroX + 16 + attackLength &&
					mapEnemies[i].positionX >= heroX + 8 &&
					mapEnemies[i].positionY + 16 >= heroY &&
					mapEnemies[i].positionY <= heroY + 16
				)
				{
					enemyHit(i);
				}
			}
			if(lastButtonPressed == "up")
			{
				if(mapEnemies[i].positionX + 16 >= heroX &&
					mapEnemies[i].positionX <= heroX + 16 &&
					mapEnemies[i].positionY + 16 >= heroY - attackLength &&
					mapEnemies[i].positionY + 16 <= heroY + 8
				)
				{
					enemyHit(i);
				}
			}
	     	if(lastButtonPressed == "down")
			{
				if(mapEnemies[i].positionX + 16 >= heroX &&
					mapEnemies[i].positionX <= heroX + 16 &&
					mapEnemies[i].positionY >= heroY + 8 &&
					mapEnemies[i].positionY <= heroY + 16 + attackLength
				)
				{
					enemyHit(i);
				}
			}
		}
	}
}

function enemyHit(i)
{
	if(canWhackEnemy)
	{
		mapEnemies[i].health = mapEnemies[i].health - currentAttackLevel;
		canWhackEnemy = false;
		if(mapEnemies[i].health > 0)
		{
			mapEnemies[i].paused = true;
		}if(mapEnemies[i].health <= 0)
		{
			mapEnemies.splice(i,1);
		}
	}
}

function attackLevelChanger()
{
	if(itemLocations[0][1] == true)
	{
		currentAttackLevel = attackDamage[0];
		attackRow = 0;
	}
	if(itemLocations[2][1] == true)
	{
		currentAttackLevel = attackDamage[1];
		attackRow = 1;
	}
	if(itemLocations[4][1] == true)
	{
		currentAttackLevel = attackDamage[2];
		attackRow = 2;
	}
	if(itemLocations[6][1] == true)
	{
		currentAttackLevel = attackDamage[3];
		attackRow = 3;
	}
}

function defenseLevelChanger()
{
	if(itemLocations[1][1] == true)
	{
		currentDefenseLevel = defenseProtection[0];
	}
	if(itemLocations[3][1] == true)
	{
		currentDefenseLevel = defenseProtection[1];
	}
	if(itemLocations[5][1] == true)
	{
		currentDefenseLevel = defenseProtection[2];
	}
	if(itemLocations[5][1] == true)
	{
		currentDefenseLevel = defenseProtection[3];
	}
}

function developerSettings()
{
	ctx.fillStyle = "#c7c700";
	ctx.fillText("map" + mapColumns[currentColumn] + currentRow, 10, 80);
	heroSpeed = 4;
	//itemLocations[0][1] = true; //att reg1
	//itemLocations[1][1] = true; //def reg1
	//itemLocations[2][1] = true; //att reg2
	//itemLocations[3][1] = true; //def reg2
	//itemLocations[4][1] = false; //att reg3
	//itemLocations[5][1] = false; //def reg3
	//itemLocations[6][1] = false; //att reg4
	//itemLocations[7][1] = false; //def reg4
	//currentHealth = 16;
	//maxHealth = 16; // max 16
	//currentHealth = 16; // max 16
	//currentPrize = 0; // max 4
	//currentAttackLevel = 10;
}

function draw () {
	setTimeout(function() {
	requestAnimationFrame(draw);
	ctx.fillStyle = "rgb(20,20,20)";
	ctx.fillRect(0,0,256,240);
	drawMap(currentMap);
	overworldBuilder();
	drawHero();
	healthCaves();
	itemCaves();
	drawEnemies();
	enemyHitDetection();
	attackDetection();
	dungeons();
	bossAttackDetection();
	bossHitDetection();
	drawHUD();
	developerSettings();
	},1000/fps);
}
draw();
